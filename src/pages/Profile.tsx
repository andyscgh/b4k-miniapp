import React, { useEffect, useState } from 'react'

declare global {
  interface Window {
    Telegram: any
  }
}

export default function Profile() {
  const [form, setForm] = useState({
    address: '',
    passport: '',
    inn: '',
    skills: [] as string[]
  })

  const [saved, setSaved] = useState(false)
  const [loading, setLoading] = useState(false)

  const skillsList = [
    '–†–µ–∂–∏—Å—Å–µ—Ä',
    '–û–ø–µ—Ä–∞—Ç–æ—Ä',
    '–û–ø–µ—Ä–∞—Ç–æ—Ä - –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫',
    '–°—Ç–∞—Ä—à–∏–π –∏–Ω–∂–µ–Ω–µ—Ä',
    '–°–≤–µ—Ç–æ—Ö—É–¥–æ–∂–Ω–∏–∫',
    '–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å–µ—Ä',
    '–ò–Ω–∂–µ–Ω–µ—Ä –ø—É–ª—å—Ç–æ–≤–æ–π',
    '–ò–Ω–∂–µ–Ω–µ—Ä Resolume',
    '–ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Ç–µ—Ö–Ω–∏–∫',
    '–ò–Ω–∂–µ–Ω–µ—Ä —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏'
  ]

  const toggleSkill = (skill: string) => {
    setForm(prev => ({
      ...prev,
      skills: prev.skills.includes(skill)
        ? prev.skills.filter(s => s !== skill)
        : [...prev.skills, skill],
    }))
  }

  const save = async () => {
    setLoading(true)
    const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user

    if (!telegramUser?.id) {
      alert('–û—à–∏–±–∫–∞: Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    await fetch('https://your-backend.com/api/employee', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ telegramUser, ...form })
    })

    setSaved(true)
    setLoading(false)
  }

  return (
    <div>
      <h1>üë§ –ü—Ä–æ—Ñ–∏–ª—å</h1>
      <div>
        <label>–ê–¥—Ä–µ—Å:<br/>
          <input value={form.address} onChange={e => setForm({ ...form, address: e.target.value })} />
        </label>
      </div>
      <div>
        <label>–ü–∞—Å–ø–æ—Ä—Ç:<br/>
          <input value={form.passport} onChange={e => setForm({ ...form, passport: e.target.value })} />
        </label>
      </div>
      <div>
        <label>–ò–ù–ù:<br/>
          <input value={form.inn} onChange={e => setForm({ ...form, inn: e.target.value })} />
        </label>
      </div>
      <div>
        <p>–ù–∞–≤—ã–∫–∏:</p>
        {skillsList.map(skill => (
          <label key={skill} style={{ display: 'block' }}>
            <input
              type="checkbox"
              checked={form.skills.includes(skill)}
              onChange={() => toggleSkill(skill)}
            />
            {skill}
          </label>
        ))}
      </div>
      <button onClick={save} disabled={loading}>
        {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
      </button>
      {saved && <p>‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</p>}
    </div>
  )
}
